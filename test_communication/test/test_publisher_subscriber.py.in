# generated from test_communication/test/test_publisher_subscriber.py.in

import os
import sys
import time

from launch import LaunchDescription
from launch import LaunchService
from launch.actions import ExecuteProcess
from launch_testing import LaunchTestService

import pytest

MESSAGE_TYPES = '@TEST_MESSAGE_TYPES@'.split(';')


@pytest.mark.parametrize('message_type', MESSAGE_TYPES)
def test_publisher_subscriber(message_type):
    namespace = '/test_time_%s' % time.strftime('%H_%M_%S', time.gmtime())

    launch_test = LaunchTestService()
    launch_description = LaunchDescription()

    publisher_cmd = ['@TEST_PUBLISHER_EXECUTABLE@', message_type, namespace]
    subscriber_cmd = ['@TEST_SUBSCRIBER_EXECUTABLE@', message_type, namespace]

    publisher_env = dict(os.environ)
    subscriber_env = dict(os.environ)

    if '@TEST_PUBLISHER_RCL@' == 'rclpy':
        publisher_cmd.insert(0, sys.executable)
        publisher_env['PYTHONUNBUFFERED'] = '1'
    if '@TEST_SUBSCRIBER_RCL@' == 'rclpy':
        subscriber_cmd.insert(0, sys.executable)
        subscriber_env['PYTHONUNBUFFERED'] = '1'

    publisher_env['RCL_ASSERT_RMW_ID_MATCHES'] = '@PUBLISHER_RMW@'
    publisher_env['RMW_IMPLEMENTATION'] = '@PUBLISHER_RMW@'

    launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=publisher_cmd,
            name='test_publisher',
            env=publisher_env,
        )
    )

    subscriber_env['RCL_ASSERT_RMW_ID_MATCHES'] = '@SUBSCRIBER_RMW@'
    subscriber_env['RMW_IMPLEMENTATION'] = '@SUBSCRIBER_RMW@'

    launch_test.add_test_action(
        launch_description, ExecuteProcess(
            cmd=subscriber_cmd,
            name='test_subscriber',
            env=subscriber_env,
        )
    )

    launch_service = LaunchService()
    launch_service.include_launch_description(launch_description)
    rc = launch_test.run(launch_service)

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. " \
        'May be the subscriber did not receive any messages?'


if __name__ == '__main__':
    for message_type in MESSAGE_TYPES:
        test_publisher_subscriber(message_type)
