# generated from test_communication/test/test_requester_replier.py.in

import os
import sys
import time

from launch import LaunchDescription
from launch import LaunchService
from launch.actions import ExecuteProcess
from launch_testing import LaunchTestService

import pytest

SERVICE_TYPES = '@TEST_SERVICE_TYPES@'.split(';')


@pytest.mark.parametrize('service_type', SERVICE_TYPES)
def test_requester_replier(service_type):
    namespace = '/test_time_%s' % time.strftime('%H_%M_%S', time.gmtime())

    launch_test = LaunchTestService()
    launch_description = LaunchDescription()

    requester_cmd = ['@TEST_REQUESTER_EXECUTABLE@', service_type, namespace]
    replier_cmd = ['@TEST_REPLIER_EXECUTABLE@', service_type, namespace]

    replier_env = dict(os.environ)
    requester_env = dict(os.environ)

    if '@TEST_REPLIER_RCL@' == 'rclpy':
        replier_cmd.insert(0, sys.executable)
        replier_env['PYTHONUNBUFFERED'] = '1'
    if '@TEST_REQUESTER_RCL@' == 'rclpy':
        requester_cmd.insert(0, sys.executable)
        requester_env['PYTHONUNBUFFERED'] = '1'

    replier_env['RCL_ASSERT_RMW_ID_MATCHES'] = '@REPLIER_RMW@'
    replier_env['RMW_IMPLEMENTATION'] = '@REPLIER_RMW@'

    launch_test.add_fixture_action(
        launch_description, ExecuteProcess(
            cmd=replier_cmd,
            name='test_replier',
            env=replier_env,
        )
    )

    requester_env['RCL_ASSERT_RMW_ID_MATCHES'] = '@REQUESTER_RMW@'
    requester_env['RMW_IMPLEMENTATION'] = '@REQUESTER_RMW@'

    launch_test.add_test_action(
        launch_description, ExecuteProcess(
            cmd=requester_cmd,
            name='test_requester',
            env=requester_env,
        )
    )

    launch_service = LaunchService()
    launch_service.include_launch_description(launch_description)
    rc = launch_test.run(launch_service)

    assert rc == 0, \
        "The launch file failed with exit code '" + str(rc) + "'. " \
        'May be the requester did not receive any replies?'


if __name__ == '__main__':
    for service_type in  SERVICE_TYPES:
        test_requester_replier(service_type)
