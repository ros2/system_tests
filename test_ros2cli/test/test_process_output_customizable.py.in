# Copyright 2019 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys

import unittest

from launch import LaunchDescription
from launch.actions import ExecuteProcess
from launch.actions import OpaqueFunction
from launch.substitutions import LaunchConfiguration

from launch_ros.substitutions import FindPackage

import launch_testing
import launch_testing.asserts

sys.path.append(os.path.dirname(__file__))

from @TEST_CONFIGURATION_FILE@ import actions_by_option, arguments_by_option  # noqa
from @TEST_CONFIGURATION_FILE@ import msgs_by_option, options, verb  # noqa


@launch_testing.parametrize('option', options)
def generate_test_description(option, ready_fn):
    cmd = [[FindPackage('ros2cli'), '/bin/ros2'], verb]
    cmd.extend(arguments_by_option[option])
    print('option: ', option)
    print(cmd)
    process_under_test = ExecuteProcess(
        cmd=cmd,
        name='@TEST_NAME@',
        output='screen',
        sigterm_timeout=LaunchConfiguration('sigterm_timeout', default=30)
    )
    actions = actions_by_option[option]
    actions.append(process_under_test)
    launch_description = LaunchDescription(
        actions
    )
    launch_description.add_action(
        OpaqueFunction(function=lambda context: ready_fn())
    )
    msgs = msgs_by_option[option]
    return launch_description, locals()


class TestCommandFinishesInAFiniteAmountOfTime(unittest.TestCase):

    def @TEST_NAME@(self, process_under_test):
        """Test that ros2 command finished in a finite amount of time."""
        self.proc_info.assertWaitForShutdown(process=process_under_test, timeout=60)


@launch_testing.post_shutdown_test()
class TestCommandOutput(unittest.TestCase):

    def @TEST_NAME@(self, proc_info, proc_output, process_under_test, msgs):
        """Test that both executables finished cleanly."""
        launch_testing.asserts.assertExitCodes(
            proc_info,
            [launch_testing.asserts.EXIT_OK],
            process_under_test
        )
        for msg in msgs:
            launch_testing.asserts.assertInStdout(
                proc_output,
                msg,
                process_under_test,
            )
